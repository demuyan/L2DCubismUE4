// Copyright 2020 demuyan
// SPDX-License-Identifier: MIT
// Licensed under the MIT Open Source License, for details please see license.txt or the website
// http://www.opensource.org/licenses/mit-license.php

#include "Common.ush"

float4x4 projectMatrix;
float4x4 clipMatrix;
float4 baseColor;
float4 channelFlag;

Texture2D mainTexture;
SamplerState mainSampler;
Texture2D maskTexture;
    
/* Setup mask shader */
void SetupMaskVS(
  float2 InPos : ATTRIBUTE0,
  float2 InUV : ATTRIBUTE1,
  out float4 OutPosition : SV_POSITION,
  out float2 OutUV : TEXCOORD0,
  out float4 OutClipPosition : TEXCOORD1
  ) {
    OutPosition = mul(float4(InPos, 0.0f, 1.0f), projectMatrix);
    OutClipPosition = mul(float4(InPos, 0.0f, 1.0f), projectMatrix);
    OutUV.x = InUV.x;
    OutUV.y = 1.0 - +InUV.y;
}

void SetupMaskPS(
  float4 InPosition : SV_POSITION,
  float2 InUV : TEXCOORD0,
  float4 InClipPosition : TEXCOORD1,
  out float4 OutColor : SV_Target0
  ){
    float isInside =
    step(baseColor.x, InClipPosition.x / InClipPosition.w)
	   * step(baseColor.y, InClipPosition.y / InClipPosition.w)
	   * step(InClipPosition.x / InClipPosition.w, baseColor.z)
       * step(InClipPosition.y / InClipPosition.w, baseColor.w);

    OutColor = channelFlag * mainTexture.Sample(mainSampler, InUV).a * isInside;
}
    
/* Vertex Shader */
/* normal */
void NormalVS(
  float2 InPos : ATTRIBUTE0,
  float2 InUV : ATTRIBUTE1,
  out float4 OutPosition : SV_POSITION,
  out float2 OutUV : TEXCOORD0
) {
    OutPosition = mul(float4(InPos, 0.0f, 1.0f), projectMatrix);
    OutUV.x = InUV.x;
    OutUV.y = 1.0 - +InUV.y;
}
/* masked */
void MaskedVS(
  float2 InPos : ATTRIBUTE0,
  float2 InUV : ATTRIBUTE1,
  out float4 OutPosition : SV_POSITION,
  out float2 OutUV : TEXCOORD0,
  out float4 OutClipPosition : TEXCOORD1
  ) {
    OutPosition = mul(float4(InPos, 0.0f, 1.0f), projectMatrix);
    OutClipPosition = mul(float4(InPos, 0.0f, 1.0f), clipMatrix);
    OutUV.x = InUV.x;
    OutUV.y = 1.0 - InUV.y;
}
    
/* Pixel Shader */
/* normal */
void NormalPS(
  float4 InPosition : SV_POSITION,
  float2 InUV : TEXCOORD0,
  out float4 OutColor : SV_Target0
){
    OutColor = mainTexture.Sample(mainSampler, InUV) * baseColor;
//    OutColor = mainTexture.Sample(mainSampler, InUV);
    OutColor.xyz *= OutColor.w;
}
    
/* normal premult alpha */
void NormalPremultPS(
  float4 InPosition : SV_POSITION,
  float2 InUV : TEXCOORD0,
  float4 InClipPosition : TEXCOORD1,
  out float4 OutColor : SV_Target0
){
    OutColor = mainTexture.Sample(mainSampler, InUV) * baseColor;
}
    
/* masked */
void MaskedPS(
  float4 InPosition : SV_POSITION,
  float2 InUV : TEXCOORD0,
  float4 InClipPosition : TEXCOORD1,
  out float4 OutColor : SV_Target0
){
    OutColor = mainTexture.Sample(mainSampler, InUV) * baseColor;
    OutColor.xyz *= OutColor.w;
	InClipPosition.y +=1;
    float4 clipMask = (1.0 - maskTexture.Sample(mainSampler, InClipPosition.xy / InClipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    OutColor = OutColor * maskVal;
}

/* masked inverted*/
void MaskedInvertedPS(
  float4 InPosition : SV_POSITION,
  float2 InUV : TEXCOORD0,
  float4 InClipPosition : TEXCOORD1,
  out float4 OutColor : SV_Target0
){
    OutColor = mainTexture.Sample(mainSampler, InUV) * baseColor;
    OutColor.xyz *= OutColor.w;
	InClipPosition.y +=1;
    float4 clipMask = (1.0 - maskTexture.Sample(mainSampler, InClipPosition.xy / InClipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    OutColor = OutColor * (1.0 - maskVal);
}

/* masked premult alpha */
void MaskedPremultPS(
  float4 InPosition : SV_POSITION,
  float2 InUV : TEXCOORD0,
  float4 InClipPosition : TEXCOORD1,
  out float4 OutColor : SV_Target0
){
    OutColor = mainTexture.Sample(mainSampler, InUV) * baseColor;
	InClipPosition.y +=1;
    float4 clipMask = (1.0 - maskTexture.Sample(mainSampler, InClipPosition.xy / InClipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    OutColor = OutColor * maskVal;
}

/* masked inverted premult alpha */
void MaskedInvertedPremultPS(
  float4 InPosition : SV_POSITION,
  float2 InUV : TEXCOORD0,
  float4 InClipPosition : TEXCOORD1,
  out float4 OutColor : SV_Target0
){
    OutColor = mainTexture.Sample(mainSampler, InUV) * baseColor;
	InClipPosition.y +=1;
    float4 clipMask = (1.0 - maskTexture.Sample(mainSampler, InClipPosition.xy / InClipPosition.w)) * channelFlag;
    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;
    OutColor = OutColor * (1.0 - maskVal);
};